{"version":3,"sources":["Components/PokeFetch/PokeFetch.js","App.js","reportWebVitals.js","index.js"],"names":["PokeFetch","timer","state","currentCount","setState","clearInterval","intervalId","resetState","pokeInfo","pokeSprite","pokeName","min","Math","ceil","max","floor","pokeNum","random","fetch","method","then","res","json","sprites","front_default","species","name","catch","err","console","log","this","setInterval","bind","className","onClick","fetchPokemon","src","style","filter","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAiEeA,E,kDA5Db,aAAe,IAAD,8BACZ,gBAwBFC,MAAQ,WACF,EAAKC,MAAMC,cAAgB,IAC/B,EAAKC,SAAS,CACZD,aAAc,EAAKD,MAAMC,aAAe,IAEtC,EAAKD,MAAMC,aAAe,GAC5BE,cAAc,EAAKC,cA/BT,EA0CdC,WAAa,WACX,EAAKH,SAAS,CAAED,aAAc,MAzC9B,EAAKD,MAAQ,CACXM,SAAU,GACVC,WAAY,GACZC,SAAU,IALA,E,gDASd,WAAgB,IAAD,OACTC,EAAMC,KAAKC,KAAK,GAChBC,EAAMF,KAAKG,MAAM,KACjBC,EAAUJ,KAAKG,MAAMH,KAAKK,UAAYH,EAAMH,GAAOA,GACvDO,MAAM,qCAAD,OAAsCF,GAAW,CACpDG,OAAQ,QACPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJ,EAAKjB,SAAS,CACZI,SAAUa,EACVZ,WAAYY,EAAIE,QAAQC,cACxBd,SAAUW,EAAII,QAAQC,UAGzBC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,gCAYhC,WACEG,KAAKzB,WAAa0B,YAAYD,KAAK9B,MAAMgC,KAAKF,MAAO,O,iCAEvD,WACE1B,cAAc0B,KAAKzB,c,oBAOrB,WAAU,IAAD,OACP,OACE,sBAAK4B,UAAW,UAAhB,UACE,wBAAQA,UAAW,QAASC,QAAS,WAAO,EAAK5B,aAAa,EAAK6B,gBAAnE,oBACA,oBAAIF,UAAW,QAAf,kCAA2CH,KAAK7B,MAAMC,gBACpD,sBAAK+B,UAAW,WAAhB,UACE,qBAAKA,UAAW,UAAWG,IAAKN,KAAK7B,MAAMO,WAAY6B,MAAmC,IAA5BP,KAAK7B,MAAMC,aAAqB,CAAEoC,OAAQ,oBAAsB,CAAEA,OAAQ,oBACxI,oBAAIL,UAAW,WAAf,SAA4BH,KAAK7B,MAAMQ,qB,GAtD3B8B,aCQTC,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,OCKSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1b729293.chunk.js","sourcesContent":["import  React , {Component} from   'react';\n\nimport './PokeFetch.css';\n\nclass PokeFetch extends Component {\n  constructor() {\n    super()\n    this.state = {\n      pokeInfo: '',\n      pokeSprite: '',\n      pokeName: '',\n    }\n  }\n\n  fetchPokemon() {\n    let min = Math.ceil(1);\n    let max = Math.floor(152);\n    let pokeNum = Math.floor(Math.random() * (max - min) + min);\n    fetch(`https://pokeapi.co/api/v2/pokemon/${pokeNum}`, {\n      method: 'GET'\n    }).then(res => res.json())\n      .then(res => {\n        this.setState({\n          pokeInfo: res,\n          pokeSprite: res.sprites.front_default,\n          pokeName: res.species.name,\n        })\n      })\n      .catch((err) => console.log(err))\n  }\n  timer = () => {\n    if (this.state.currentCount <= 0) return;\n    this.setState({\n      currentCount: this.state.currentCount - 1,\n    });\n    if (this.state.currentCount < 1) {\n      clearInterval(this.intervalId);\n    }\n  };\n\n  componentDidUpdate() {\n    this.intervalId = setInterval(this.timer.bind(this), 1000);\n  }\n  componentWillUpdate() {\n    clearInterval(this.intervalId);\n  }\n\n  resetState = () => {\n    this.setState({ currentCount: 10 });\n  };\n\n  render() {\n    return (\n      <div className={'wrapper'}>\n        <button className={'start'} onClick={() => {this.resetState();this.fetchPokemon()}}>Start!</button>\n        <h1 className={'timer'}>{`Timer Display: ${this.state.currentCount}`}</h1>\n          <div className={'pokeWrap'}>\n            <img className={'pokeImg'} src={this.state.pokeSprite} style={this.state.currentCount === 0 ? { filter: 'brightness(100%)' }: { filter: 'brightness(0%)' } }/>\n            <h1 className={'pokeName'}>{this.state.pokeName}</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PokeFetch;","import './App.css';\nimport PokeFetch from './Components/PokeFetch/PokeFetch';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PokeFetch />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}